1. generral approach for any k linked list (sorted or unsorted) 

 class comp {
    public :  bool operator()( ListNode* a , ListNode* b) {

        
         if(b==NULL)return false;
      
      return (a->val>b->val);
    }
};

// priority queue main class banana hota hai agar comapre karne main kuch change karna ho to
 
 

ListNode* Solution::mergeKLists(vector<ListNode*> &A) {
  
  

  
  
priority_queue<ListNode*,vector<ListNode*>,comp>m;
ListNode* node=NULL; //yeh declaration improtantt hai 
for(int i=0;i<A.size();i++)
{
    node=A[i];
    
    while(node!=NULL)
    {
        m.push(node);
        node=node->next;
    }
    
    
    
}
ListNode* ans=m.top();
node=m.top();
m.pop();
while(m.empty()==0)
{
    node->next=m.top();
    m.pop();
    node=node->next;
    
    
}
  return ans;
  
  
  
}
**************************************************


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 class comp
 {
    public: bool operator()(ListNode* a,ListNode* b)
     {
         
         if(b==NULL)return false;
         if(a==NULL)return true;
          return (a->val>b->val);
         
     }
     
     
 };
 
 
 
ListNode* Solution::mergeKLists(vector<ListNode*> &A) {

priority_queue< ListNode*,vector<ListNode*>,comp>m;
vector<int>v;

int i=0;
for(i=0;i<A.size();i++)
{
    
    m.push(A[i]);
}

ListNode* ans= m.top();
ListNode* temp1=NULL;
ListNode* temp=m.top();
m.pop();
m.push(temp->next);
while(m.top()!=NULL)
{
    
    temp->next=m.top();
    temp1=m.top();
    
    m.pop();
    temp=temp->next;
    m.push(temp1->next);
    
    
    
    
}


return ans;







}
