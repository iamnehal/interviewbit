 bool isValid(int x,int y,int n,int m,vector<vector<int>>&v)
    {



if(x<0 || y<0 || x>=n || y>=m)return 0;
if(v[x][y]!=1)return 0;
//if(v[x][y]==1)return 0;
return 1;


    }

int dx[]={ 0,1,1,1,0,-1,-1,-1  };
int dy[]={ 1,1,0,-1,-1,-1,0,1,}  ;









int Solution::solve(vector<vector<int> > &A) {
int N=A.size();
int M=A[0].size();
int ans=0;
// vector<vector<int>>dis(N,vector<int>(M,0));
  //vector<vector<int>>vis(N,vector<int>(M,0));
int i,j;
for(i=0;i<N;i++)
{
    for(j=0;j<M;j++)
    {
        if( A[i][j]==1)
        {
 int curr=0;
       queue<pair<int,int>>q;
       int x,y;
       x=i;y=j;
       q.push({x,y});
       A[x][y]=2;

       while(q.empty()==0)
       {
           int tx=q.front().first;
           int ty=q.front().second;
           curr++;
           q.pop();
           for(int k=0;k<8;k++)
           {   int newx=tx+dx[k];
           int newy=ty+dy[k];

  if(isValid(newx,newy,N,M,A))
  {
    
   A[newx][newy]=2;
   q.push({newx,newy});

  }

           }

       }

ans=max(curr,ans);
        }



    }
}


 

return ans;

}

************************************
int isvalid(vector<vector<int>>&v,int x,int y)
{
    int n=v.size();
    int m=v[0].size();
    if((x<0)|| x>=n ||( y<0 )||  (y>=m))return 0;
    if(v[x][y]!=1 )return 0;
    return 1;
}


int dx[]={ 0,0,1,1,1,-1,-1,-1  };
int dy[]={ 1,-1,0,-1,1,-1,1,0   }; 


int  dfs( vector<vector<int>>&v,int x,int y)

{v[x][y]=2;
int count=1;

for(int i=0;i<8;i++)
{   int newx=x+dx[i];
int newy=y+dy[i];

if(isvalid(v,newx,newy))
{
    
    count=count+dfs(v,newx,newy);
}

}
    return count;
}





int Solution::solve(vector<vector<int> > &A) {
    
    int n=A.size();
    int m=A[0].size();
    int i,j;
    int ans=0;
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        { 
            if(isvalid(A,i,j))
            {   

               
                              int count= dfs(A,i,j);
                ans=max(ans,count);
                 
                
            }
            
            
        }
    }
    
   return ans; 
}





