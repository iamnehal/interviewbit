
class Solution
{
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       
       int b[n];
       for(int i=0;i<n;i++)
       {b[i]=a[i];}
   sort(b,b+ n);
   
       int i,j;
       int dp[2][n+1];
       for(i=0;i<=n;i++)
       {
           
           for(j=0;j<=n;j++)
           {
               if(i==0||j==0)dp[i%2][j]=0;
               else if(a[i-1]==b[j-1] )
               {
                   if(j>1 && b[j-1]==b[j-2])dp[i%2][j]=max(dp[(i+1)%2][j],dp[i%2][j-1]);
                   else
                   
                   dp[i%2][j]=dp[(i+1)%2][j-1]+1;
                   
                   
               }
               else
               {
                   dp[i%2][j]=max(dp[(i+1)%2][j],dp[i%2][j-1]);
                   
               }
               
           }
       }
       
       return dp[n%2][n];
       
       
       
       
       
    }
};



soln2: class Solution {
public:
    int dp[2501][2501];
    
    
    int solve(vector<int>v,int prv,int cur)
    {
        
        if(cur==v.size())return 0;
        if(prv==INT_MIN+1)
        {
            return max( solve(v,cur,cur+1)+1,solve(v,prv,cur+1)           );
            
            
            
        }
        
        
        if(dp[cur][prv]!=-1)return dp[cur][prv];
        
        if(v[cur]>v[prv])
        {
            
            dp[cur][prv]=max( solve(v,cur,cur+1)+1,solve(v,prv,cur+1)           );
            
            
            
        }
        else
        {
            dp[cur][prv]=solve(v,prv,cur+1);
            
            
        }
        return dp[cur][prv];
        
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    int lengthOfLIS(vector<int>& nums) {
        
        
        memset(dp,-1,sizeof(dp));
        int ans=solve(nums,INT_MIN+1,0);
        return ans;
        
        
    }
};

soln 3********************


class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        
        int dp[n];
        for(int i=0;i<n;i++)dp[i]=1;
        int maxans=1;
        
    int i,j;
        for(i=0;i<n-1;i++)
        {
            for(j=i+1;j<n;j++)
            {
                
                if(nums[j]>nums[i] &&  dp[i]>=dp[j])
                {
                    
                    dp[j]=dp[i]+1;
                    maxans=max(maxans,dp[j]);
                }
                
                
            }
        }
        
        return maxans;
        
        
        
        
        
        
        
    }
};
