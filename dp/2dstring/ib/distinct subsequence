1: watch videos on utube --try to relate with knapsack problem 


soln 1: 
int dp[701][701];

int solve(string a,string b,int m,int n)


{ 

if(m<=0)
{
    if(n<=0)return 1;
    return 0;
    
    
    
}

if(n<=0)return 1;




if(dp[m][n]!=-1)return dp[m][n];

if(a[m-1]==b[n-1])
{
    dp[m][n]=solve(a,b,m-1,n-1)+solve(a,b,m-1,n);
    return dp[m][n];
    
}
else
{
    dp[m][n]=solve(a,b,m-1,n);
    return dp[m][n];
    
}




    
    
    
}



int Solution::numDistinct(string A, string B) {
    
    
    memset(dp,-1,sizeof(dp));
    int ans=solve(A,B,A.size(),B.size());
    return ans;
    
    
    
    
    
}


soln2: solve it like aditya verma video on no of ways to get to sum (knapsack variations)

int Solution::numDistinct(string a, string b) {
    int m=a.size();
    int n=b.size();
    
    int i,j;
    int dp[m+1][n+1];
    
    
    for(i=0;i<=m;i++)
    {
        dp[i][0]=1;
        
        
    }
    
    for(j=0;j<=n;j++)
    {
        dp[0][j]=0;
    }
    dp[0][0]=1;
    
    
    for(i=1;i<=m;i++)
    {
        
        for(j=1;j<=n;j++)
        {
            
            if(a[i-1]!=b[j-1])
            {
                dp[i][j]=dp[i-1][j];
            
            }
            else
            {int choice1=dp[i-1][j-1];//selection
            int choice2=dp[i-1][j];//not selection
        
                dp[i][j]=choice1+choice2;
                
            }
            
            
            
            
            
        }
    }
    
    return dp[m][n];
    
    
    
    
    
    
}













